html,
body {
  padding: 0em;
  margin: 0em;
  --slider-width: 1.5em;
  --textbox-width: var(--slider-width);
}

/*NOTE: the styling for the Save color button element is being handled by a react style-component, in SaveColorPick */
/* THIS IS NOW BEING HANDLED BY styled components in the react component SAVE COLOR PICK -->BUTTON FOR saving selected color patch from menu*/

.entrywaySubmit:hover {
  display: block;
  color: white;
  background: var(--linkGrey);
}

/* Pixel element 'pinkestpink' that on click, adds more portal pixels to the view - also a way to get to next rehersal pages*/

.pixel {
  position: absolute;
  z-index: 10;
}

/* subclass of pixel, that handles rolover animations etc */
.picnicPatch {
  width: 25px;
  height: 25px;
  border: 1px inset white;
  cursor: pointer;
  /* background: var(--entrypatch-color); */
  -webkit-transition: width 2s ease-in 0.1ms, height 0.5s ease-in 2s;
  -moz-transition: width 2s ease-in 0.1ms, height 0.5s ease-in 2s;
  -ms-transition: width 2s ease-in 0.1ms, height 0.5s ease-in 2s;
  -o-transition: width 2s ease-in 0.1ms, height 0.5s ease-in 2s;
  transition: width 2s ease-in 0.1ms, height 0.5s ease-in 2s;
}

.picnicPatch:hover {
  width: 25vw;
  height: 25vw;
  cursor: pointer;
  /* animation: line 5s forwards; */
  /* decided not to use this method */
}

.hidden {
  display: none;
}

/*LARGE Color Palette elements that bookened the color slice elements - the color slices are the thin color elements that on mouse click open to reveal text inside */

@keyframes palette1 {
  0% {
    background-color: var(--hsl1);
  }

  50% {
    background-color: var(--hsl2);
  }

  100% {
    background-color: var(--hsl1);
  }
}

@keyframes palette2 {
  0% {
    background-color: var(--hsl2);
  }

  50% {
    background-color: var(--hsl1);
  }

  100% {
    background-color: var(--hsl2);
  }
}

.paletteClick {
  cursor: pointer;
  width: 25vw;
}

.openSlider {
  width: 25vw;
}

.paletteContainer {
  cursor: crosshair;
  z-index: 10;
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  justify-content: flex-start;
  /* display: inline-block; */
  /*use float if going with vertical)*/
  /* position: relative; use this if going with horizontal stripes*/
  padding: 0em;
  margin: 0em;
}

/* 
THIS IS NOW BEING HANDLED BY STYLED COMPONENTS.
.containerPalette {
} */

.palette {
  cursor: pointer;
  z-index: 11;
  width: 0.3vw;
  height: 100vh;

  -webkit-transition: width 3s;
  -moz-transition: width 3s;
  -ms-transition: width 3s;
  -o-transition: width 3s;
  transition: width 3s;
  padding: 0em;
  margin: 0em;
}

.paletteClick {
  cursor: pointer;
  width: 25vw;
}

#palette1 {
  cursor: crosshair;
  width: 20vw;
  height: 100vh;
  --h: 63;
  --s: 48%;
  --l: 50%;
  --hsl: hsl(var(--h), var(--s), var(--l));
  background-color: var(--hsl);
  -webkit-transition: width 3s;
  -moz-transition: width 3s;
  -ms-transition: width 3s;
  -o-transition: width 3s;
  transition: width 3s;
  padding: 0em;
  margin: 0em;
}

#palette2 {
  cursor: crosshair;
  width: 80vw;
  height: 100vh;
  /* --h2: 243;
    --hsl2: hsl(var(--h2), 48%, 50%); */
  --h: 243;
  --s: 48%;
  --l: 50%;
  --hsl: hsl(var(--h), var(--s), var(--l));
  background-color: var(--hsl);
  -webkit-transition: width 3s;
  -moz-transition: width 3s;
  -ms-transition: width 3s;
  -o-transition: width 3s;
  transition: width 3s;
  padding: 0em;
  margin: 0em;
}

/*COLOR SLICE SLIDES that expand and contract on user interaction. contains textBox with text retrieved from slideText database table*/

.sliderContainer {
  /* display: none; */
  z-index: 0;
  height: 100vh;
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  justify-content: flex-start;
}

.slider {
  overflow: scroll;
  padding-top: 2em;
  z-index: 0;
  width: var(--slider-width);
  height: 100vh;
  -webkit-transition: width 3s;
  -moz-transition: width 3s;
  -ms-transition: width 3s;
  -o-transition: width 3s;
  transition: width 3s;
}

.slider:hover {
  border: 1px inset white;
  /* width: 3vw; */
  cursor: pointer;
}

.sliderOpen {
  cursor: pointer;
  width: 25vw;
}

.textSub-container {
  position: absolute;
  top: 600px;
  left: 5vw;
  z-index: 100;
}

.textBox {
  cursor: pointer;
  color: rgb(236, 236, 236);
  font-family: "Quicksand", sans-serif;
  font-size: 15px;
  padding: var(--slider-width);
}

/* FORM FOR ADDING TEXT to database */

.slideTextForm {
  z-index: 10;
  position: absolute;
  bottom: 5%;
  margin: 0.5rem 1rem;
  /* left: 3%; */
}

.slideTextForm input[type="text"] {
  margin: 0.5rem 0.5rem 0.5rem 0rem;
  -webkit-transition: width 1s;
  -moz-transition: width 1s;
  transition: width 1s;
  width: 10.8rem;
}

.slideTextForm input[type="text"]:focus {
  letter-spacing: 1px;
  width: 70vw;
}

/* this is stylings applied to the same elements cited above (.slideTextForm input[type="text"]), but in case i want this styling to be reusable, i'm giving it a unique classname - data entered here, with the submit button, is added to the sliderText table in the database*/
.entrywayDataWrite {
  padding: 0.5rem 0;
  border-radius: 3px;
  font-size: medium;
  letter-spacing: 5px;
  text-align: center;
  /* width: 10.8rem; */
  height: 2em;
  color: var(
    --linkPink
  ); /*color of text when you start typing inside the box, not the label text*/
}

/* BUTTON FOR posting text data to database - specifically the sliderText table*/
.entrywaySubmit {
  z-index: 10;
  display: inline-block;
  border-radius: 3px;
  background: var(--header-primary);
  padding: 0.5rem 0;
  width: 11rem;
  color: var(--linkGrey);
  opacity: 0.9;
  border: 1.5px solid var(--header-primary);
  font-weight: 300;
  font-size: medium;
  letter-spacing: 1px;
  text-decoration: none;
  text-align: center;
  font-family: "Roboto", sans-serif;
  cursor: pointer;
}
